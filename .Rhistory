compute_gradient(0.8, 0.1, beta, dat$x, dat$y, dat$KO_mod_mat)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_testthat()
use_test("generate_lambda_space")
library(usethis)
use_test("generate_lambda_space")
use_test("transform_lambda_space")
use_test("compute_lik_prod")
use_test("sum_lambda_space")
use_test("compute_log_lik")
use_test("generate_basic_example")
use_test("generate_model_data")
use_test("expit")
devtools::check()
exp(0)
#'
#' @return A number representing the expit of \code{x}. This is equal to
#' \code{1/(1+e^(-x))}.
#'
#' @examples
#' expit(1)
#' expit(1000)
#' expit(-1000)
#'
#' @export
expit <- function(x) {
return(1/(1+exp(-x)))
}
expit(1)
expit(0)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
beta <- matrix(1:4, nrow = 2)
x <- matrix(c(rep(1, 5), rbinom(5, 1, 0.5)), nrow = 5)
y <- matrix(c(rbinom(5*5, 1, 0.5)), nrow = 5)
lambda <- c(1, 0)
KO_max <- c(1, 1, 1, 0, 0)
devtools::check()
beta <- matrix(1:4, nrow = 2)
x <- matrix(c(rep(1, 5), rbinom(5, 1, 0.5)), nrow = 5)
y <- matrix(c(rbinom(5*5, 1, 0.5)), nrow = 5)
lambda <- c(1, 0)
KO_max <- c(1, 1, 1, 0, 0)
# compute product by hand
prod <- 0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
expit(x[2, ] %*% beta[1, ]) * (1 - expit(x[2, ] %*% beta[2, ]))
res <- compute_lik_prod(0.8, 0.1, beta, x, y, lambda, 2, KO_max)
x[2, ]
beta[1, ]
x[2, ] %*% beta[2, ]
x[2, ] %*% beta[1, ]
x[2, ] %*% beta
beta
# compute product by hand
prod <- 0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
expit(x[2, ] %*% beta[, 1]) * (1 - expit(x[2, ] %*% beta[, 2]))
devtools::check()
devtools::check()
compute_lik_prod(0.8, 0.1, beta, x, y, lambda, 2, KO_max)
prod
str(prod)
str(compute_lik_prod(0.8, 0.1, beta, x, y, lambda, 2, KO_max))
str(unlist(prod))
str(as.numeric(prod))
str(as.numeric(prod))
devtools::check()
# 4 samples
n <- 4
# 2 modules
m <- 2
# 5 KOs
r <- 5
# mod 1 contains KOs 1, 2, 3, mod 2 contains KOs 1, 4, 5
mods <- list(mod1 = 1:3,
mod2 = c(1, 4, 5))
# KO and module matrix
KO_mod_mat <- matrix(0, nrow = r, ncol = m)
# fill in KO and module matrix
for (k in 1:m) {
KO_mod_mat[mods[[k]], k] <- 1
}
KO_mod_mat
devtools::check()
devtools::check()
devtools::check()
dat <- generate_basic_example()
beta <- matrix(rnorm(4), nrow = 2)
devtools::install()
sample_space <- generate_lambda_space(2)
KO_max_mat <- transform_lambda_space(2, 5, sample_space, dat$KO_mod_mat)
sum_lambda_space(0.8, 0.1, beta, dat$x, dat$y, sample_space, 1, KO_max_mat)
dat <- generate_basic_example()
beta <- matrix(1:4, nrow = 2)
sample_space <- generate_lambda_space(2)
KO_max_mat <- transform_lambda_space(2, 5, sample_space, dat$KO_mod_mat)
res <- sum_lambda_space(0.8, 0.1, beta, dat$x, dat$y, sample_space, 2, KO_max_mat)
y <- dat$y
x <- dat$x
# compute product by hand
sum_res <- 0.1^y[2, 1] * 0.9^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2]))
devtools::check()
# compute product by hand
sum_res <- log(0.1^y[1, 1] * 0.9^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(1 - expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (expit(x[1, ] %*% beta[, 2]))) +
log(0.1^y[2, 1] * 0.9^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2]))) +
log(0.1^y[3, 1] * 0.9^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2]))) +
log((0.1^y[4, 1] * 0.9^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2]))))
dat <- generate_basic_example()
beta <- matrix(1:4, nrow = 2)
KO_max_mat <- transform_lambda_space(2, 5, sample_space, dat$KO_mod_mat)
res <- compute_log_lik(0.8, 0.1, beta, dat$x, dat$y, KO_max_mat)
warnings()
dat <- generate_basic_example()
beta <- matrix(1:4, nrow = 2)
res <- compute_log_lik(0.8, 0.1, beta, dat$x, dat$y, dat$KO_mod_mat)
y <- dat$y
x <- dat$x
# compute product by hand
sum_res <- -(log(0.1^y[1, 1] * 0.9^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(1 - expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (expit(x[1, ] %*% beta[, 2]))) +
log(0.1^y[2, 1] * 0.9^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2]))) +
log(0.1^y[3, 1] * 0.9^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2]))) +
log((0.1^y[4, 1] * 0.9^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2])))))
y
dat <- generate_basic_example()
beta <- matrix(1:4, nrow = 2)
res <- compute_log_lik(0.8, 0.1, beta, dat$x, dat$y, dat$KO_mod_mat)
y <- dat$y
x <- dat$x
#' is in the definition for module \code{k}.
#'
#' @return The negative log likelihood of the parameters given the data.
#'
#' @examples
#' dat <- generate_basic_example()
#' beta <- matrix(rnorm(4), nrow = 2)
#' compute_log_lik(0.8, 0.1, beta, dat$x, dat$y, dat$KO_mod_mat)
#'
#' @export
compute_log_lik <- function(a, epsilon, beta, x, y, KO_mod_mat) {
# number of modules
m <- ncol(KO_mod_mat)
# number of KOs
r <- nrow(KO_mod_mat)
# create sample space for lambda values
sample_space <- generate_lambda_space(m)
# compute max lambda for each KO for each point in sample space
KO_max_mat <- transform_lambda_space(m, r, sample_space, KO_mod_mat)
# initialize log likelihood
log_lik <- 0
# sample size
n <- nrow(x)
# take sum of log likelihood for each sample
for (i in 1:n) {
log_lik <- log_lik +
log(sum_lambda_space(a, epsilon, beta, x, y,
sample_space, i, KO_max_mat))
print(log(sum_lambda_space(a, epsilon, beta, x, y,
sample_space, i, KO_max_mat)))
}
return(-log_lik)
}
res <- compute_log_lik(0.8, 0.1, beta, dat$x, dat$y, dat$KO_mod_mat)
log(0.1^y[1, 1] * 0.9^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(1 - expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (expit(x[1, ] %*% beta[, 2])))
log(0.1^y[2, 1] * 0.9^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])))
log(0.1^y[3, 1] * 0.9^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2])))
log((0.1^y[4, 1] * 0.9^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2]))))
# compute product by hand
sum_res <- -(log(0.1^y[1, 1] * 0.9^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(1 - expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.1^y[1, 2] * 0.9^(1 - y[1, 2]) *
0.1^y[1, 3] * 0.9^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(1 - expit(x[1, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.1^y[1, 4] * 0.9^(1 - y[1, 4]) *
0.1^y[1, 5] * 0.9^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (1 - expit(x[1, ] %*% beta[, 2])) +
0.8^y[1, 1] * 0.2^(1 - y[1, 1]) * 0.8^y[1, 2] * 0.2^(1 - y[1, 2]) *
0.8^y[1, 3] * 0.2^(1 - y[1, 3]) * 0.8^y[1, 4] * 0.2^(1 - y[1, 4]) *
0.8^y[1, 5] * 0.2^(1 - y[1, 5]) *
(expit(x[1, ] %*% beta[, 1])) * (expit(x[1, ] %*% beta[, 2]))) +
log(0.1^y[2, 1] * 0.9^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.1^y[2, 2] * 0.9^(1 - y[2, 2]) *
0.1^y[2, 3] * 0.9^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(1 - expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.1^y[2, 4] * 0.9^(1 - y[2, 4]) *
0.1^y[2, 5] * 0.9^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (1 - expit(x[2, ] %*% beta[, 2])) +
0.8^y[2, 1] * 0.2^(1 - y[2, 1]) * 0.8^y[2, 2] * 0.2^(1 - y[2, 2]) *
0.8^y[2, 3] * 0.2^(1 - y[2, 3]) * 0.8^y[2, 4] * 0.2^(1 - y[2, 4]) *
0.8^y[2, 5] * 0.2^(1 - y[2, 5]) *
(expit(x[2, ] %*% beta[, 1])) * (expit(x[2, ] %*% beta[, 2]))) +
log(0.1^y[3, 1] * 0.9^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.1^y[3, 2] * 0.9^(1 - y[3, 2]) *
0.1^y[3, 3] * 0.9^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(1 - expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.1^y[3, 4] * 0.9^(1 - y[3, 4]) *
0.1^y[3, 5] * 0.9^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (1 - expit(x[3, ] %*% beta[, 2])) +
0.8^y[3, 1] * 0.2^(1 - y[3, 1]) * 0.8^y[3, 2] * 0.2^(1 - y[3, 2]) *
0.8^y[3, 3] * 0.2^(1 - y[3, 3]) * 0.8^y[3, 4] * 0.2^(1 - y[3, 4]) *
0.8^y[3, 5] * 0.2^(1 - y[3, 5]) *
(expit(x[3, ] %*% beta[, 1])) * (expit(x[3, ] %*% beta[, 2]))) +
log((0.1^y[4, 1] * 0.9^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.1^y[4, 2] * 0.9^(1 - y[4, 2]) *
0.1^y[4, 3] * 0.9^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(1 - expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.1^y[4, 4] * 0.9^(1 - y[4, 4]) *
0.1^y[4, 5] * 0.9^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (1 - expit(x[4, ] %*% beta[, 2])) +
0.8^y[4, 1] * 0.2^(1 - y[4, 1]) * 0.8^y[4, 2] * 0.2^(1 - y[4, 2]) *
0.8^y[4, 3] * 0.2^(1 - y[4, 3]) * 0.8^y[4, 4] * 0.2^(1 - y[4, 4]) *
0.8^y[4, 5] * 0.2^(1 - y[4, 5]) *
(expit(x[4, ] %*% beta[, 1])) * (expit(x[4, ] %*% beta[, 2])))))
devtools::check()
devtools::check()
devtools::check()
library(testthat)
library(usethis)
use_test("compute_gradient")
n <- 4
m <- 2
r <- 5
mods <- list(mod1 = 1:3,
mod2 = c(1, 4, 5))
# KO and module matrix
KO_mod_mat <- matrix(0, nrow = r, ncol = m)
# fill in KO and module matrix
for (k in 1:m) {
KO_mod_mat[mods[[k]], k] <- 1
}
x <- matrix(c(rep(1, 4), c(1, 0, 0, 1)), nrow = 4)
x
y <- matrix(c(1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1), nrow = 4)
y
beta <- matrix(c(1, 1, 10, -10), nrow = 2, byrow = TRUE)
beta
2.688718e+01
n <- 4
m <- 2
r <- 5
mods <- list(mod1 = 1:3,
mod2 = c(1, 4, 5))
# KO and module matrix
KO_mod_mat <- matrix(0, nrow = r, ncol = m)
# fill in KO and module matrix
for (k in 1:m) {
KO_mod_mat[mods[[k]], k] <- 1
}
x <- matrix(c(rep(1, 4), c(1, 0, 0, 1)), nrow = 4)
y <- matrix(c(1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1), nrow = 4)
beta <- matrix(c(1, 1, 10, -10), nrow = 2, byrow = TRUE)
compute_gradient(0.8, 0.1, beta, x, y, KO_mod_mat)
devtools::check()
devtools::check()
git add .
?model.response
?kable
mat <- matrix(NA, nrow = 5, ncol = 5)
mat <- matrix(NA, nrow = 2, ncol = 2)
row.names(mat) <- c("a","b")
col.names(mat) <- c("1", "2")
colnames(mat) <- c("1", "2")
mat
kable(mat)
?kable
knitr::kable(mat)
devtools::document()
devtools::document()
is.double(5.2421)
is.double(1)
round(1.555)
devtools::install()
beta <- matrix(c(rep(1, 2), 1, 5), nrow = 2)
res <- generate_model_data(seed = 1, n = 4, m = 2, r = 5, p = 1, a = 0.8,
epsilon = 0.1, beta = beta,
cont_x = TRUE)
devtools::check()
